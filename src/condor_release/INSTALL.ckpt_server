Complete installation directions for Condor can be found in the Condor
Manual.  The complete Condor Manual is available for download or
online browsing at URL:
   http://www.cs.wisc.edu/condor/manual

We recommend that you go to the above URL and download the Condor
Manual.  However, section 3.3.5 of the 6.0 manual, which provides
installation directions for the CondorView Server contrib module, is
reproduced below in ASCII.

     _________________________________________________________________

3.3.5 Installing a Checkpoint Server

   The Checkpoint Server is a daemon that can be installed on a server
   to handle all of the checkpoints that a Condor pool will
   create. This machine should have a large amount of disk space
   available, and should have a fast connection to your machines.

   NOTE: It is a good idea to pick a very stable machine for your
   checkpoint server. If the checkpoint server crashes, the Condor
   system will continue to operate, though poorly. While the Condor
   system will recover from a checkpoint server crash as best it can,
   there are two problems that can (and will) occur:

   1.     If the checkpoint server is not functioning, when jobs need 
          to checkpoint, they cannot do so. The jobs will keep trying
          to contact the checkpoint server, backing off exponentially
          in the time they wait between attempts. Normally, jobs only
          have a limited time to checkpoint before they are kicked off
          the machine. So, if the server is down for a long period of
          time, chances are that you'll loose a lot of work by jobs
          being killed without writing a checkpoint.

   2.     When the jobs wish to start, if they cannot be retrieved
          from the checkpoint server, they will either have to be
          restarted from scratch, or the job will sit there, waiting
          for the server to come back on-line. You can control this
          behavior with the MAX_DISCARDED_RUN_TIME parameter in your
          config file (see section 3.4.10 on page [*] for details).
          Basically, this represents the maximum amount of CPU time
          you're willing to discard by starting a job over from
          scratch if the checkpoint server isn't responding to
          requests. 

  Preparing to Install a Checkpoint Server

   Because of the problems that exist if your pool is configured to
   use a checkpoint server and that server is down, it is advisable to
   shut your pool down before doing any maintenance on your checkpoint
   server.  See section 3.8 on page [*] for details on how to do that.

   If you are installing a checkpoint server for the first time, you
   must make sure there are no jobs in your pool before you start. If
   you have jobs in your queues, with checkpoint files on the local
   spool directories of your submit machines, those jobs will never
   run if your submit machines are configured to use a checkpoint
   server and the checkpoint files cannot be found on the server. You
   can either remove jobs from your queues, or let them complete
   before you begin the installation of the checkpoint server.

  Installing the Checkpoint Server Module

   To install a checkpoint server, download the appropriate binary
   contrib module for the platform your server will run on. When you
   uncompress and untar that file, you'll have a directory that
   contains a README, ckpt_server.tar, and so on. The ckpt_server.tar
   acts much like the release.tar file from a main release. This
   archive contains these files:

        sbin/condor_ckpt_server
        sbin/condor_cleanckpts
        etc/examples/condor_config.local.ckpt.server

   These are all new files, not found in the main release, so you can
   safely untar the archive directly into your existing release
   directory. condor_ckpt_server is the checkpoint server binary.
   condor_cleanckpts is a script that can be periodically run to
   remove stale checkpoint files from your server. Normally, the
   checkpoint server cleans all old files by itself. However, in
   certain error situations, stale files can be left that are no
   longer needed. So, you may want to put a cron job in place that
   calls condor_cleanckpts every week or so, just to be safe. The
   example config file is described below.

   Once you have unpacked the contrib module, you have a few more
   steps you must complete. Each will be discussed in their own
   section:
   1.     Configure the checkpoint server.
   2.     Spawn the checkpoint server.
   3.     Configure your pool to use the checkpoint server.

  Configuring a Checkpoint Server

   There are a few settings you must place in the local config file of
   your checkpoint server.  The file
   etc/examples/condor_config.local.ckpt.server contains all such
   settings, and you can just insert it into the local configuration
   file of your checkpoint server machine.

   There is one setting that you must customize, and that is
   CKPT_SERVER_DIR.  The CKPT_SERVER_DIR defines where your checkpoint
   files should be located. It is better if this is on a very fast
   local file system (preferably a RAID). The speed of this file
   system will have a direct impact on the speed at which your
   checkpoint files can be retrieved from the remote machines.

   The other optional settings are:

   DAEMON_LIST
          (Described in section 3.4.7). If you want the checkpoint server
          managed by the condor_master, the DAEMON_LIST entry must have
          MASTER and CKPT_SERVER. Add STARTD if you want to allow jobs to
          run on your checkpoint server. Similarly, add SCHEDD if you
          would like to submit jobs from your checkpoint server.

   The rest of these settings are the checkpoint-server specific versions
   of the Condor logging entries.

   CKPT_SERVER_LOG 
          The CKPT_SERVER_LOG is where the checkpoint server log gets
          put. 

   MAX_CKPT_SERVER_LOG
          Use this item to configure the size of the checkpoint server
          log before it is rotated.
          
   CKPT_SERVER_DEBUG
          The amount of information you would like printed in your
          logfile.  Currently, the only debug level supported is
          D_ALWAYS. 

  Spawning a Checkpoint Server

   To spawn a checkpoint server once it is configured to run on a
   given machine, all you have to do is restart Condor on that host to
   enable the condor_master to notice the new configuration. You can
   do this by sending a condor_restart command from any machine with
   ``administrator'' access to your pool. See section 3.7 for full
   details about IP/host-based security in Condor. 

  Configuring your Pool to Use the Checkpoint Server

   Once the checkpoint server is installed and running, you just have
   to change a few settings in your global config file to let your
   pool know about your new server:

   USE_CKPT_SERVER
          This parameter should be set to ``True''.

   CKPT_SERVER_HOST
          This parameter should be set to the full hostname of the 
          machine that is now running your checkpoint server.

   Once these settings are in place, you simply have to send a
   condor_reconfig to all machines in your pool so the changes take
   effect.  The easiest way to do that is to issue the following
   command:

           % condor_reconfig `condor_status -master`
