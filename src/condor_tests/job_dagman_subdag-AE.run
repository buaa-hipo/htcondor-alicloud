#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

# Note: this is the same thing as job_dagman_subdag-A.run, except
# that it's eagerly generating the .condor.sub files for the nested
# DAGs (hence the 'E').

use CondorTest;
use CondorUtils;

$cmd = 'job_dagman_subdag-A-upper.dag';
$testdesc =  'Condor submit dag - sub-DAG test with eager submit file generation - scheduler U';
$testname = "job_dagman_subdag-AE";
# Here we pass most arguments that should be passed down to lower-level
# DAGs.  We're just passing in non-default values here so that we can
# check that the get passed down properly and inserted into the generated
# .condor.sub files.
$dagman_args = "-verbose -do_recurse -notification never -allowlogerror -outfile_dir . -autorescue 0 -allowversionmismatch -update_submit -import_env";
# Tell DAGMan to not generate the .condor.sub files for nested DAGs itself.
$ENV{_CONDOR_DAGMAN_GENERATE_SUBDAG_SUBMITS} = 0;

@outfiles = ("job_dagman_subdag-A-lower1-node.B", 
  "job_dagman_subdag-A-lower1-node.C", 
  "job_dagman_subdag-A-lower1-node.D", 
  "job_dagman_subdag-A-lower2-node.A", 
  "job_dagman_subdag-A-lower2-node.B", 
  "job_dagman_subdag-A-lower2-node.C", 
  "job_dagman_subdag-A-lower2-node.D", 
  "job_dagman_subdag-A-upper-node.A", 
  "job_dagman_subdag-A-upper-node.D",
  "job_dagman_subdag-A-lowerlower1-node.A",
  "job_dagman_subdag-A-lowerlower1-node.B",
  "job_dagman_subdag-A-lowerlower1-node.C",
  "job_dagman_subdag-A-lowerlower1-node.D");

@logfiles = ("job_dagman_subdag-A-lower1.dag.dagman.out",
  "job_dagman_subdag-A-lower2.dag.dagman.out",
  "job_dagman_subdag-A-upper.dag.dagman.out");

@submitfiles = ("job_dagman_subdag-A-lower1.dag.condor.sub",
	"job_dagman_subdag-A-lower2.dag.condor.sub",
	"job_dagman_subdag-A-upper.dag.condor.sub",
	"job_dagman_subdag-A-lowerlower1.dag.condor.sub");

my $killedchosen = 0;

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

# Get rid of any existing log files.
foreach $name (@logfiles) {
	if (-e $name) {
		runcmd("rm -f $name");
	}
}

# Get rid of any existing submit files.
foreach $name (@submitfiles) {
	if (-e $name) {
		runcmd("rm -f $name");
	}
}

$abnormal = sub 
{

	die "Want to see only submit, execute and successful completion\n";
};

$aborted = sub 
{
	die "Abort event NOT expected\n";
};

$held = sub 
{
	die "Held event NOT expected\n";
};

$executed = sub
{
	my %info = @_;

	CondorTest::debug("Good. We need the dag to run<$info{cluster}>\n",1);
};

$submitted = sub
{
	CondorTest::debug("submitted: This test will see submit, executing and successful completion\n",1);
};

$success = sub
{
	CondorTest::debug("executed successfully\n",1);
	CondorTest::debug("Verifying output\n",1);
	$diditpass = 1;
	foreach $name (@outfiles) {
		$line = "";
		$passed = 0;
		$canopen = open(OUT,"<$name.out");
		if( ! (defined $canopen)) {
			CondorTest::debug("Can not open outfile<$name.out>:$!\n",1);
			$diditpass = 0;
		}
		while(<OUT>) {
			chomp();
			$line = $_;
			if( $line =~ /^.*OK$/ ) {
				$passed = 1;
				CondorTest::debug("$name.out: $line\n",1);
			}
		}
		close(OUT);
		if($passed == 1 ) {
			;
		} else {
			CondorTest::debug("failed $name.out: $line\n",1);
			$diditpass = 0;
		}
	}
	# clean out old output files
	foreach $name (@outfiles) {
		runcmd("rm -f $name.out $name.err");
	}

	foreach $name (@logfiles) {
		$line = "";
		$passed = 0;
		$canopen = open(OUT,"<$name");
		if( ! (defined $canopen)) {
			CondorTest::debug("Can not open logfile<$name>:$!\n",1);
			$diditpass = 0;
		}
		while(<OUT>) {
			chomp();
			$line = $_;
			if( $line =~ /^.*EXITING WITH STATUS 0.*$/ ) {
				$passed = 1;
				CondorTest::debug("$name: $line\n",1);
			}
		}
		close(OUT);
		if($passed == 1 ) {
			;
		} else {
			CondorTest::debug("failed $name: $line\n",1);
			$diditpass = 0;
		}
	}

	# Make sure that the right arguments got passed down to all of the
	# submit files.
	foreach $name (@submitfiles) {
		$line = "";
		$passed = 0;
		$canopen = open(OUT,"<$name");
		if( ! (defined $canopen)) {
			CondorTest::debug("Can not open logfile<$name>:$!\n",1);
			$diditpass = 0;
		}
		while(<OUT>) {
			chomp();
			$line = lc $_;
			if( $line =~ /arguments/ ) {
				# I'm not using regexps here because we want to search
				# for exact matches...
				if( index($line, "-verbose") lt 0) {
					CondorTest::debug("failed: missing '-verbose' in line <$line>\n");
				} elsif( index($line, "-notification never") lt 0) {
					CondorTest::debug("failed: missing '-notification never' in line <$line>\n");
				} elsif( index($line, "-allowlogerror") lt 0) {
					CondorTest::debug("failed: missing '-allowlogerror' in line <$line>\n");
				} elsif( index($line, "-outfile_dir .") lt 0) {
					CondorTest::debug("failed: missing '-outfile_dir .' in line <$line>\n");
				} elsif( index($line, "-autorescue 0") lt 0) {
					CondorTest::debug("failed: missing '-autorescue 0' in line <$line>\n");
				} elsif( index($line, "-allowversionmismatch") lt 0) {
					CondorTest::debug("failed: missing '-allowversionmismatch' in line <$line>\n");
				} elsif( index($line, "-update_submit") lt 0) {
					CondorTest::debug("failed: missing '-update_submit' in line <$line>\n");
				} elsif( index($line, "-import_env") lt 0) {
					CondorTest::debug("failed: missing '-import_env' in line <$line>\n");
				} else {
					$passed = 1;
					CondorTest::debug("$name: $line\n",1);
				}
			}
		}
		close(OUT);
		if($passed == 1 ) {
			;
		} else {
			CondorTest::debug("failed $name: $line\n",1);
			$diditpass = 0;
		}
	}

	if($diditpass == 0) {
		die "All expected files and correct output failed\n";
	}
};

CondorTest::RegisterExitedSuccess( $testname, $success);
CondorTest::RegisterExecute($testname, $executed);
CondorTest::RegisterExitedAbnormal( $testname, $abnormal );
CondorTest::RegisterAbort( $testname, $aborted );
CondorTest::RegisterHold( $testname, $held );
CondorTest::RegisterSubmit( $testname, $submitted );

if( CondorTest::RunDagTest($testname, $cmd, 0, $dagman_args) ) {
	CondorTest::debug("$testname: SUCCESS\n",1);
	exit(0);
} else {
	die "$testname: CondorTest::RunTest() failed\n";
}

