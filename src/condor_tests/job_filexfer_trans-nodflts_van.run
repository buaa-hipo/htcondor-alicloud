#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;

$cmd      = 'job_filexfer_trans-nodflts_van.cmd';
$testdesc =  ' testing of file transfer with no default values used. - vanilla U';
$testname = "job_filexfer_trans-nodflts_van";

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

my $alreadydone=0;

$execute = sub {
	my %args = @_;
	my $cluster = $args{"cluster"};

	CondorTest::debug("Running $cluster\n",1);

};

$abort = sub {
	CondorTest::debug("Job is gone now, cool.\n",1);
};

$release = sub
{
	my %args = @_;
	my $cluster = $args{"cluster"};

};

$shadow = sub
{
	my %args = @_;
	my $cluster = $args{"cluster"};
	my $error = $args{"shadowerror"};

	CondorTest::debug("Shadow Error: Cluster $cluster: $error\n",1);
	my @adarray;
	my $status = 1;
	my $cmd = "condor_rm $cluster";
	$status = CondorTest::runCondorTool($cmd,\@adarray,2);
	if(!$status)
	{
		CondorTest::debug("Test failure due to Condor Tool Failure<$cmd>\n",1);
		exit(1);
	}
	sleep 3;
	CondorTest::debug("$testname: SUCCESS\n",1);
};

$success = sub
{
	die "Base file transfer job can not run!\n";
};

$timed = sub
{
	die "Job should have ended by now. file transfer broken!\n";
};

CondorTest::RegisterShadow($testname, $shadow);
CondorTest::RegisterExecute($testname, $execute);
CondorTest::RegisterAbort($testname, $abort);
CondorTest::RegisterExitedSuccess($testname, $success);
#CondorTest::RegisterTimed($testname, $timed, 3600);

if( CondorTest::RunTest($testname, $cmd, 0) ) {
	CondorTest::debug("$testname: SUCCESS\n",1);
	exit(0);
} else {
	die "$testname: CondorTest::RunTest() failed\n";
}

