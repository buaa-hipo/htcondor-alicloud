#!/usr/bin/env perl
#testreq: personal IPv4
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************


use CondorTest;
use strict;
use warnings;

my %wants_core;
my $cmd1 = 'job_core_coredump-yes_std.cmd';
my $handle1 = 'job_core_coredump_std';
$wants_core{$handle1} = 1;

my $cmd2 = 'job_core_coredump-none_std.cmd';
my $handle2 = 'job_core_coredump_std';
$wants_core{$handle2} = 0;
my $debuglevel = 2;

my $core_file = 'core';

my $CheckCoreFiles = sub {
    my %info = @_;
    my $core = $info{"core"};
    my $handle = $info{"handle"};
    my $core_file_found = 0;
    my @expected_output;

	my %listoftests; 
	$listoftests{"corename"} = "job_core_coredump_std";
	$listoftests{"tests"} = [ "job_core_coredump-yes_std", "job_core_coredump-none_std"];
	$listoftests{"extensions"} = [ ".cmd", ".cmd.out", ".err", ".out", ".log"];
	CondorTest::MergeOutputFiles(\%listoftests);

	if(defined $core) {
    	CondorTest::debug("Checking for $core...",3);
    	if( $core ne "" && (-e $core) ) {
			CondorTest::debug("yes.\n",3);
			$core_file_found = 1;
    	} else {
			CondorTest::debug("no.\n",3);
    	}
	}

    if( $wants_core{$handle} ) {
		$core_file_found || 
	    	die "$handle: FAILURE (No core file created)\n";
    } else {
		$core_file_found && 
	    	die "$handle: FAILURE (core file created)\n";
    }

    -z $info{"error"} || 
		die "$handle: FAILURE (STDERR contains data)\n";

    @expected_output = ( 'About to divide by zero' );
	CondorTest::SetExpected(\@expected_output);

	CondorTest::CompareText( $info{"output"}, \@expected_output ) ||
		die "$handle: FAILURE (STDOUT doesn't match expected output)\n";
};

CondorTest::RegisterExitedAbnormal( $handle1, $CheckCoreFiles );
CondorTest::RegisterExitedAbnormal( $handle2, $CheckCoreFiles );

CondorTest::debug("job_core_coredump-yes_std being called",3);
$wants_core{$handle1} = 1;

print "This part should create and return a core file - ";
if( CondorTest::RunTest($handle1, $cmd1, 0) ) {
	print "ok\n";
    CondorTest::debug("$handle1: SUCCESS\n",$debuglevel);
} else {
	print "bad\n";
    die "$handle1: CondorTest::RunTest() failed\n";
}

print "This part should create but not return a core file - ";
CondorTest::debug("job_core_coredump-none_std being called",3);
$wants_core{$handle1} = 0;

if( CondorTest::RunTest($handle2, $cmd2, 0) ) {
	print "ok\n";
    CondorTest::debug("$handle2: SUCCESS\n",3);
} else {
	print "bad\n";
    die "$handle2: CondorTest::RunTest() failed\n";
}

exit(0);

