#!/usr/bin/env perl
#testreq: personal IPv4
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************


use CondorTest;

$cmd = 'job_ckpt_env_std.cmd';
$testdesc =  'Env Test';
$testname = "job_ckpt_env_std";
# This test can have variable output depending on condor configuration file
# settings, the cluster/proc of the job, or environment variables. So were
# going to specifically check if known specific lines are present in the
# output.
$OutputCheck = sub 
{
	my %info = @_;
	my $line;
	my %existence;
	my $count;

	# These values represent actual lines (or transformed lines) from the
	# output file of the job. Each one of these keys must have been found for
	# the test to have succeeded. Lines (transformed or not) outside of this
	# set may be ignored.
	my @present = (	'ENV "alpha=a"',
					'ENV "bravo=b"',
					'ENV "charlie=c"',
					'argv[1] = "foo"',
					'argv[2] = "bar"',
					'argv[3] = "glarch"',
					'Environment vector OK',
					'Argument vector OK',
					'Environment vector OK',
					'Argument vector OK',
					'Environment vector OK',
					'Argument vector OK',
					'Normal End Of Job',
				);

	die "No output file '$info{\"output\"}' when one was expected.\n"
		if (! -f $info{"output"});

	# Grab the output and mark whether or not I saw it. When processing the
	# env vars, manipulate them a little bit so it is easy to see if I saw
	# exactly what I'm looking for. This is like this because the env vars
	# can come out in any order in the job and all of them are considered
	# correct.
	@lines = `cat $info{"output"}`;
	foreach $line (@lines) {
		chomp $line;

		# For environment variables, we get rid of their positional value
		# in the output and just look up the fact they were env vars in general.
		if ($line =~ m/^environ\[\d+\]/) {
			$line =~ s/^environ\[\d+\] = /ENV /g;
		}
		$existence{$line} = 1;
	}

	# now, we check to see if all of the specified "keys" in the @present array
	# exist in the existence hash with a value of one.
	$count = 0;
	foreach $line (@present) {
		if ($existence{$line} != 1) {
			CondorTest::debug("FAILURE: Did not find expected line:\n",1);
			CondorTest::debug("$line\n",1);
		} else {
			$count++;
		}
	}

	# If I found the same number of exact lines as I've specified then the
	# output has been verified to contain at least those lines of output.
	if ($count == scalar(@present)) {
		return;
	}

	CondorTest::debug("FAILURE : Expected " . scalar(@present) . " certain output lines ".
		"to be present, but only saw $count of them.\n",1);
    die "$testname: CondorTest::RunTest() failed\n";
};

CondorTest::RegisterExitedSuccess( $testname, $OutputCheck );

if( CondorTest::RunTest($testname, $cmd, 0) ) {
    CondorTest::debug("$testname: SUCCESS\n",1);
    exit(0);
} else {
    die "$testname: CondorTest::RunTest() failed\n";
}


