#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************
##
## This test check availability and usage contol of the new
## local, resources in both a static configuration and in psolts.
## It is model after what we did to test concurrency limits
## as we are checking the same sorts of things. bt
##
##**************************************************************
use CondorTest;
use CondorUtils;
use Check::SimpleJob;
use Check::CondorLog;
#use Time::ParseDate;
use Time::Local;
use Cwd;

#testreq: personal
my $config = <<CONDOR_TESTREQ_CONFIG;
    DAEMON_LIST = MASTER,SCHEDD,COLLECTOR,NEGOTIATOR,STARTD
    WANT_SUSPEND = FALSE
    NEGOTIATION_INTERVAL = 5
    SCHEDD_INTERVAL = 5
    NUM_CPUS = 24
    MAX_SCHEDD_LOG = 20 Kb
CONDOR_TESTREQ_CONFIG
#endtestreq

my $donejob = 1;
my $test_name = "job_test_scheddrotation";
my $logpattern = "SchedLog";
CondorTest::RunTest($test_name);

my $localconfig = "condor_config.local";
my $localconfigsave = "condor_config.local.save";
my $configlocation = "";
my $top = getcwd();

my $ClusterId = 0;
my $expect_return = 0;

#my $firstappend_condor_config = '
#	DAEMON_LIST = MASTER,SCHEDD,COLLECTOR,NEGOTIATOR,STARTD
#	WANT_SUSPEND = FALSE
#	NEGOTIATION_INTERVAL = 5
#	SCHEDD_INTERVAL = 5
#	NUM_CPUS = 24
#	MAX_SCHEDD_LOG = 20 Kb
#';
#
#$configfile1 = CondorTest::CreateLocalConfig($firstappend_condor_config,"scheddlogrotation1");
#
#CondorTest::StartCondorWithParams(
#	condor_name => "scheddlogrotation1",
#	fresh_local => "TRUE",
#	condorlocalsrc => "$configfile1",
#);

Condor::SetAllowedEvents("RegisterEvictedWithoutCheckpoint,RegisterSubmit,RegisterExecute,RegisterImageupdated");

#sub on_execute {
#};
#
#sub on_submit {
##};

#sub on_imageupdated {
#};

#sub on_success {
	#print "$donejob completed\n";
	#$donejob += 1;
	#system("condor_q");
	#timestamp();
#};

sub on_timeout
{
	my @adarray = ();
	my $now = CondorTest::timestamp();
	print "SimpleJob timeout expired!\n";
	runCondorTool("condor_status", \@adarray, 2, {emit_output=>1});
	runCondorTool("condor_q", \@adarray, 2, {emit_output=>1});
	runCondorTool("condor_rm -all", \@adarray, 2, {emit_output=>1});
};

sub on_abort
{
	my $now = CondorTest::timestamp();
	print "$now SimpleJob aborted!\n";
};

print "First test basic job\n";
$result = SimpleJob::RunCheck(
	queue_sz => 40,
	timeout => 600,
	#on_execute => \&on_execute,
	#on_success => \&on_success,
	#on_submit => \&on_submit,
	#on_imageupdated => \&on_imageupdated,
	alt_timed => \&on_timeout,
	abort_fn => \&on_abort
); # jobid 1

my $return = "";
my $executecount = 0;
my $result = 1;

#Do a job before setting tesing exit codes

my @adarray = ();
my $LogLocation = "";

runCondorTool("condor_config_val log", \@adarray, 2, {emit_output=>0});

$LogLocation = $adarray[0];
fullchomp($LogLocation);
print "We believe log location is:$LogLocation\n";

chdir("$LogLocation");
DirLs();

my $logcount = 0;
my @logarray = ();

$logcount = GetFilesByBasePattern($logpattern,\@logarray);
#runCondorTool("ls | grep $logpattern", \@logarray, 2, {emit_output=>1});

#$logcount = @logarray;

print "There are $logcount logs we care about\n";

if($logcount == 2) {
	# this means we have rotated at leaset once
	RegisterResult(1, "test_name", $test_name);
}



my $mylog = 0;
my $myrotated = 0;

# must have one without an extension and one with
foreach my $file (@logarray) {
	fullchomp($file);
	if($file =~ /^SchedLog$/){
		$mylog = 1;
		print "Have the log file:$file\n";
	}
	if($file =~ /^SchedLog\..*$/){
		$myrotated = 1;
		print "Have rotated log file:$file\n";
	}
}

if(($myrotated == 1) && ($myrotated == 1)) {
	print "Have both the log and the rotated log: OK\n";
	RegisterResult(1, "test_name", $test_name);
} else {
	print "DONT Have both the log and the rotated log: Bad\n";
	RegisterResult(0, "test_name", $test_name);
}

my $logsstring = GetLogsString($LogLocation,"$logpattern");
# pass logs oldest to newest
my $result = ValidateLogs($logsstring,20480, 0, 2000, $LogLocation);
RegisterResult($result, "test_name", $test_name);
CondorTest::EndTest();
exit(0);



chdir("$LogLocation");

@adarray = ();
# 75 long * 410 = 30 kb
runCondorTool("condor_testwritelog -c 410 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", \@adarray, 2 ,{emit_output=>0});
my $logsstring = GetLogsString($LogLocation,"WriteLogLog");
# pass logs oldest to newest
my $result = ValidateLogs($logsstring,20480, 0, 2000, $LogLocation);
RegisterResult($result, "test_name", $test_name);
chdir("$top");

print "Test default log rotation with 20 Kb size constraint: ";
if($result == 1) {
	print "OK\n";
	if(defined $killconfig) {
		CleanLogs($LogLocation);
	}
} else {
	print "BAD\n";
	if(defined $killconfig) {
		leave( "Stopping to allow log inspection here:$LogLocation\n");
	}
}

if(!(defined $killconfig)) {
	my $secondappend_condor_config = '
		DAEMON_LIST = MASTER,SCHEDD,COLLECTOR,NEGOTIATOR,STARTD
		WANT_SUSPEND = FALSE
		NEGOTIATION_INTERVAL = 5
		MAX_WRITELOG_LOG = 20 Kb
		WRITELOG_LOG = $(log)/WriteLogLog
		WRITELOG_DEBUG = D_ALWAYS
		MAX_NUM_WRITELOG_LOG = 4
	';

	$configfile2 = CondorTest::CreateLocalConfig($secondappend_condor_config,"testlogrotation2");

	CondorTest::StartCondorWithParams(
		condor_name => "testlogrotation2",
		fresh_local => "TRUE",
		condorlocalsrc => "$configfile2",
	);

	print "First test basic job\n";
	$result = SimpleJob::RunCheck(); # jobid 1
} else {
	my $test2 = '
		MAX_NUM_WRITELOG_LOG = 4
	';

	AppendLocalConfig($test2);

	print "****************** Sized based testing with more then two files\n";
}

runCondorTool("condor_config_val log", \@adarray, 2, {emit_output=>0});

$LogLocation = $adarray[0];
chomp($LogLocation);
chdir("$LogLocation");

@adarray = ();
# 75 long * 955 = 70 kb
runCondorTool("condor_testwritelog -c 955 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", \@adarray, 2 ,{emit_output=>0});
$logsstring = GetLogsString($LogLocation,"WriteLogLog");
# pass logs oldest to newest
$result = ValidateLogs($logsstring, 20480, 0, 112000, $LogLocation);
RegisterResult($result, "test_name", $test_name);
chdir("$top");

print "Test multifile log rotation with 20 Kb size constraint: ";
if($result == 1) {
	print "OK\n";
	if(defined $killconfig) {
		CleanLogs($LogLocation);
	}
} else {
	print "Known Broken\n";
	if(defined $killconfig) {
		#leave( "Stopping to allow log inspection here:$LogLocation\n");
	}
}

if(!(defined $killconfig)) {
	my $thirdappend_condor_config = '
		DAEMON_LIST = MASTER,SCHEDD,COLLECTOR,NEGOTIATOR,STARTD
		WANT_SUSPEND = FALSE
		NEGOTIATION_INTERVAL = 5
		MAX_WRITELOG_LOG = 20 Sec
		WRITELOG_LOG = $(log)/WriteLogLog
		WRITELOG_DEBUG = D_ALWAYS
	';

	$configfile3 = CondorTest::CreateLocalConfig($thirdappend_condor_config,"testlogrotation3");

	CondorTest::StartCondorWithParams(
		condor_name => "testlogrotation3",
		fresh_local => "TRUE",
		condorlocalsrc => "$configfile3",
	);

	print "First test basic job\n";
	$result = SimpleJob::RunCheck(); # jobid 1
} else {
	my $test3 = '
		MAX_WRITELOG_LOG = 20 Sec
		MAX_NUM_WRITELOG_LOG = 1
	';

	AppendLocalConfig($test3);

	print "************ testing for 2 time based log files\n";
}

runCondorTool("condor_config_val log", \@adarray, 2, {emit_output=>0});

$LogLocation = $adarray[0];
chomp($LogLocation);
chdir("$LogLocation");

@adarray = ();
runCondorTool("condor_testwritelog -s 1 -c 80  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", \@adarray, 2 ,{emit_output=>0});
$logsstring = GetLogsString($LogLocation,"WriteLogLog");
# pass logs oldest to newest
$result = ValidateLogs($logsstring, 0, 20, 300, $LogLocation);
RegisterResult($result, "test_name", $test_name);
chdir("$top");

print "Test time based log rotation with 20 Sec time constraint: ";
if($result == 1) {
	print "OK\n";
	if(defined $killconfig) {
		CleanLogs($LogLocation);
	}
} else {
	print "BAD\n";
	if(defined $killconfig) {
		leave( "Stopping to allow log inspection here:$LogLocation\n");
	}
}

if(!(defined $killconfig)) {
	my $forthappend_condor_config = '
		DAEMON_LIST = MASTER,SCHEDD,COLLECTOR,NEGOTIATOR,STARTD
		WANT_SUSPEND = FALSE
		NEGOTIATION_INTERVAL = 5
		MAX_WRITELOG_LOG = 20 Sec
		WRITELOG_LOG = $(log)/WriteLogLog
		WRITELOG_DEBUG = D_ALWAYS
		MAX_NUM_WRITELOG_LOG = 2
	';

	$configfile4 = CondorTest::CreateLocalConfig($forthappend_condor_config,"testlogrotation4");

	CondorTest::StartCondorWithParams(
		condor_name => "testlogrotation4",
		fresh_local => "TRUE",
		condorlocalsrc => "$configfile4",
	);

	print "First test basic job\n";
	$result = SimpleJob::RunCheck(); # jobid 1
} else {
	my $test4 = '
		MAX_NUM_WRITELOG_LOG = 2
	';

	AppendLocalConfig($test4);

	print "************ Testing for more then two time based log files\n";
}

runCondorTool("condor_config_val log", \@adarray, 2, {emit_output=>0});

$LogLocation = $adarray[0];
chomp($LogLocation);
chdir("$LogLocation");

@adarray = ();
runCondorTool("condor_testwritelog -s 1 -c 80  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", \@adarray, 2 ,{emit_output=>0});
# pass logs oldest to newest
my $logsstring = GetLogsString($LogLocation,"WriteLogLog");
$result = ValidateLogs($logsstring, 0, 20, 300, $LogLocation);
RegisterResult($result, "test_name", $test_name);
chdir("$top");

print "Test time based log rotation with 20 Sec time constraint and multiple files: ";
if($result == 1) {
	print "OK\n";
	if(defined $killconfig) {
		CleanLogs($LogLocation);
	}
} else {
	print "BAD\n";
	if(defined $killconfig) {
		leave( "Stopping to allow log inspection here:$LogLocation\n");
	}
}


CondorTest::EndTest();
RestoreLocalConfig(); # retore original condor_config.local file


#my $localconfig = "condor_config.local";
#my $localconfigsave = "condor_config.local.save";
#my $configlocation = "";
# $localconfig = SaveLocalConfig();

sub SaveLocalConfig
{
	my @adarray = ();
	runCondorTool("condor_config_val -config", \@adarray, 2, {emit_output=>1});

	my $locfigloc = $adarray[1];
	chomp($locfigloc);

	if($locfigloc =~ /^\s*(.*?)condor_config\.local$/) {
		$configlocation = $1;
	} else {
		print "Mismatch on $locfigloc\n";
	}
	chdir("$configlocation");
	runcmd("cp $localconfig $localconfigsave",{emit_output=>0});
	#runcmd("ls",{emit_output=>0});

	#print "Leaving SaveLocalConfig configlocation: $configlocation, top:$top\n";
	#print "Configfile location is: $configlocation\n";
	chdir("$top");
}

sub AppendLocalConfig
{
	my $newtext = shift;
	my $tmpconfig = "condor_config.local.new";
	#print "entering AppendLocalConfig configlocation: $configlocation\n";
	chdir("$configlocation");
	#print "AppendLocalConfig src:$localconfig dest:$tmpconfig\n";
	open(CF, "<$localconfig") or leave( "Append Failed to $localconfig:$!\n");
	open(CFN, ">$tmpconfig") or leave("Append Failed to $tmpconfig:$!\n");
	# copy contents of current config file
	while (<CF>) {
		print CFN "$_";
	}
	close(CF);
	print CFN "$newtext";
	close(CFN);
	runcmd("mv $tmpconfig $localconfig",{emit_output=>0});
	chdir("$top");
}

sub RestoreLocalConfig
{
	#print "entering RestoreLocalConfig configlocation: $configlocation\n";
	chdir("$configlocation");
	runcmd("cp $localconfig condor_config.test",{emit_output=>0});
	runcmd("cp $localconfigsave $localconfig",{emit_output=>0});
	#runcmd("ls",{emit_output=>1});

	print "Config restore complete\n";
	chdir("$top");
}

sub leave 
{
	my $diemessage = shift;
	RestoreLocalConfig();
	die $diemessage;
}

sub GetFilesByPattern
{
	my $pattern = shift;
	my $resarrayref = shift;
	my $location = shift;
	my $cwd = getcwd();
	my $count = 0;
	if(defined $location) {
		chdir("$location");
	}
	opendir(GD,".") or die "failed to open .:$!\n";
	foreach my $subfile (readdir GD) {
		next if $subfile =~ /^\.\.?$/;
		if($subfile =~/$pattern\..*/) {
			push @{$resarrayref}, $subfile;
			print "GetFilesByPattern:$subfile match pattern:$pattern\n";
			$count += 1;
		}
	}
	close(GD);
	if(defined $location) {
		chdir("$cwd");
	}
	return($count);
}

sub GetFilesByBasePattern
{
	my $pattern = shift;
	my $resarrayref = shift;
	my $location = shift;
	my $cwd = getcwd();
	my $count = 0;
	if(defined $location) {
		chdir("$location");
	}
	opendir(GD,".") or die "failed to open .:$!\n";
	foreach my $subfile (readdir GD) {
		next if $subfile =~ /^\.\.?$/;
		if($subfile =~/^$pattern.*$/) {
			push @{$resarrayref}, $subfile;
			print "GetFilesByPattern:$subfile match pattern:$pattern\n";
			$count += 1;
		}
	}
	close(GD);
	if(defined $location) {
		chdir("$cwd");
	}
	return($count);
}

sub GetLogsString
{
	my $loglocation = shift;
	my $pattern = shift;
	my @patterns = ();
	my @sortedpatterns = ();
	my @reversepatterns =  ();
	my $sorteddstring = "";
	my $size = 0;
	my $count = 0;
	my $string = "";
	my $matches = 0;

	print "Check pattern: $pattern from here: ";
	#DirLs();
	#@patterns = `ls $pattern.*`;
	$matches = GetFilesByPattern($pattern,\@patterns);
	$size = @patterns;
	print "There are $size matching patterns\n";
	while($count < $size)
	{
		# remove possible white space
		$string = $patterns[$count];
		print "Consider:$string\n";

		#if($string =~ /\s*(.*?)\s*/) {
			#$patterns[$count] = $1;
			#print "Changed to :$1:\n";
		#}
		$count += 1;
	}

	@sortedpatterns = sort @patterns;
	print "Sorted logs:\n";
	foreach my $target (@sortedpatterns) {
		print "$target ";
	}
	print "\n";

	#@reversepatterns = reverse @sortedpatterns;

	foreach my $logfile (@sortedpatterns) {
		chomp($logfile);
		if($sorteddstring eq "") {
			$sorteddstring = $logfile;
		} elsif($logfile eq "WriteLogLog.old") {
			$sorteddstring = "$logfile," . $sorteddstring;
		} else {
			$sorteddstring = $sorteddstring . ",$logfile";
		}
	}

	print "New log ordering: $sorteddstring\n";
	return($sorteddstring);
}

sub CleanLogs
{
	my $loglocation = shift;
	chdir("$loglocation");
	#print "Cleaning, here now:\n";
	#runcmd("pwd;ls WriteLog*");
	runcmd("rm WriteLog*",{emit_output=>0});
	#print "After cleaning\n";
	#system("pwd;ls WriteLog*");
	chdir("$top");
}

sub ValidateLogs
{
	my $logs = shift;
	my $size = shift;
	my $times = shift;
	my $iters = shift;
	my $loglocation = shift;
	my $result = 1; # defaults to good.
	my $sizechk = 0;
	my $timecheck = 0;
	my $logcount = 0;

	CondorTest::debug("ValidateLogs: Log Location: $loglocation\n",1);

	chdir("$loglocation");
	#print "here now:\n";
	#system("pwd;ls WriteLog*");
	my @logs = split /,/, $logs;
	$logcount = @logs;
	#print "Checking $logcount logs:$logs\n";

	# first check existence of files
	foreach my $logfile (@logs) {
		if(!(-f $logfile)) {
			print "Expected log file does not exist: $logfile\n";
			chdir($top);
			return(0);
		}
	}
	# next check even flow of numbers as we travel through ordered list of log files
	#$seqresult = LogSequenceCheck($logs);

	#CondorTest::RegisterResult($seqresult, "test_name", $test_name);

	#CondorTest::debug("Sequence validation of:$logs: ",1);
	#if($seqresult == 1) {
		#print "OK\n";
	#} else {
		#print "BAD\n";
	#}

	# check approximate size or age of file
	if($size != 0) {
		$sizechk = 1;
		CondorTest::debug("LogSizeCheck\n",1);
		$result = LogSizeCheck($logs, $size, $logcount);
	}
	if($times != 0) {
		$timecheck = 1;
		CondorTest::debug("LogTimeCheck\n",1);
		$result = LogTimeCheck($logs, $times, $logcount);
	}

	CondorTest::debug( "Back to validate\n",1);
	if($sizechk or $timecheck) {
	} else {
		CondorTest::debug("Either a size or time test needs to be requested\n",1);
		chdir($top);
		return($result);
	}
	if($result != 1) {
		chdir($top);
		return($result);
	}
	chdir("$top");
	return($result);
}

sub LogSequenceCheck
{
	my $logs = shift;
	my $wpattern = shift;  # are we checking one writers sequences?
	my @logs = split /,/, $logs;
	my $res = 1;
	my $lastseq = 0;
	my $line = "";
	foreach my $logfile (@logs) {
		open(SC,"<$logfile") or leave( "Sequence check on validated log: $logfile failed:$!\n");
		while (<SC>) {
			chomp($_);
			$line = $_;
			if($line =~ /hostname/) {
				next;
			}
			if(defined $wpattern) {
				if($line =~ /^.*?$wpattern,(\d+),.*$/) {
					#print "$1\n";
					if($lastseq == 0) {
						$lastseq = $1;
					} else {
						if(($lastseq -1) != $1) {
							print "comparing ($lastseq -1) to $1 in $line\n";
							return(0);
						} else {
							$lastseq = $1;
						}
					}
				}
			} else {
				if($line =~ /^.*?(\d+),.*$/) {
					#print "$1\n";
					if($lastseq == 0) {
						$lastseq = $1;
					} else {
						if(($lastseq -1) != $1) {
							print "comparing ($lastseq -1) to $1 in $line\n";
							return(0);
						} else {
							$lastseq = $1;
						}
					}
				}
			}
		}
	}
	return($res);
}

sub LogSizeCheck
{
	my $logs = shift;
	my $size = shift;
	my $logcount = shift;
	my @logs = split /,/, $logs;
	my $res = 1;
	my $count = 0;
	my $filesize = 0;
	while($count < ($logcount - 1)) {
		$filesize = -s $logs[$count];
		# lets bracket the size
		if($filesize < ($size + 1024)) {
		} else {
			print "Log: $logs[$count] size: $filesize > ($size + 1024)\n";
			return(0);
		}
		if($filesize > ($size - 1024)) {
		} else {
			print "Log: $logs[$count] size: $filesize < ($size - 1024)\n";
			return(0);
		}
		$count += 1;
	}
	return($res);
}

sub LogTimeCheck
{
	my $logs = shift;
	my $time = shift;
	my $logcount = shift;
	my @logs = split /,/, $logs;
	my $res = 1;
	my $count = 0;
	my $StartTime = 0;
	my $EndTime = 0;
	my $TimeDiff = 0;
	my $line = "";
	while($count < ($logcount - 1)) {
		$StartTime = 0;
		$EndTime = 0;
		open(LL,"<@logs[$count]") or leave( "Failed to open @logs[$count]:$!\n");
		while (<LL>) {
			chomp();
			$line = $_;
			#if($line =~ /^(\d+\/\d+\/\d+\s+\d+:\d+:\d+\s+).*$/) {
			if($line =~ /^(\d+)\/(\d+)\/(\d+)\s+(\d+):(\d+):(\d+)\s+.*$/) {
				#print "$1\n";
				#$StartTime = parsedate("$1");
				if($StartTime == 0) {
					$StartTime = timelocal($6,$5,$4,$2,($1 - 1),$3);
				} else {
					$EndTime = timelocal($6,$5,$4,$2,($1 - 1),$3);
				}
			}
		}
		close(LL);
		$TimeDiff = $EndTime - $StartTime;
		#print "---$StartTime---\n";
		#print "---$EndTime---\n";
		#print "Diff = $TimeDiff\n";
		if($TimeDiff < ($time + 4)) {
		} else {
			print "Log: $logs[$count] time: $TimeDiff > ($time + 4)\n";
			return(0);
		}
		if($TimeDiff > ($time - 4)) {
		} else {
			print "Log: $logs[$count] time: $TimeDiff < ($time - 4)\n";
			return(0);
		}
		$count += 1;
	}
	return($res);
}
