#! /usr/bin/env perl
#testreq: personal
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorUtils;

$cmd = 'job_dagman_nonexistent_subdag.dag';
$testdesc =  'Condor DAGman test for a nested dag with no corresponding DAG file - scheduler U';
$testname = "job_dagman_nonexistent_subdag";
$dagman_args = "-verbose";

#**************************************************************
#
# Job is to check that if a nested DAG file does
# not exist, then dagman does the right thing: exits
# and does not write a "no cycle detecteed" non sequitor error
# message.
#
#**************************************************************

# TEMP -- to-do: add check of jobstate.log file.

$outfile = "$testname.dag.dagman.out";
runcmd("rm -f $outfile");

my $killedchosen = 0;

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

$abnormal = sub 
{
	die "Want to see only submit, execute and successful completion\n";
};

$aborted = sub 
{
	die "Abort event NOT expected\n";
};

$held = sub 
{
	die "Held event NOT expected\n";
};

$executed = sub
{
	my %info = @_;

	CondorTest::debug("Good. We need the dag to run<$info{cluster}>\n",1);
};

$submitted = sub
{
	CondorTest::debug("submitted: This test will see submit, executing and failure on completion\n",1);
};

$success = sub
{
	die("DAG is expected to fail.\n");
};

$failure = sub 
{
	CondorTest::debug("DAG failed as expected\n",1);
	CondorTest::debug("Verifying output\n",1);
	$diditpass = 1;
	open OUTFILE, "<$outfile" || die "Cannot open $outfile\n";
	while(<OUTFILE>) {
		if(/ERROR: no cycle found; unknown error condition/) {
			die "Unexpected: $_\n";
		}
	}
	close OUTFILE;
	return $diditpass;
};

CondorTest::RegisterExitedFailure( $testname, $failure);
CondorTest::RegisterExitedSuccess( $testname, $success);
CondorTest::RegisterExecute($testname, $executed);
CondorTest::RegisterExitedAbnormal( $testname, $abnormal );
CondorTest::RegisterAbort( $testname, $aborted );
CondorTest::RegisterHold( $testname, $held );
CondorTest::RegisterSubmit( $testname, $submitted );

if( CondorTest::RunDagTest($testname, $cmd, 0, $dagman_args) ) {
	if (! -e $outfile) {
		die "$testname: failed -- no $outfile file!  DAG not run?\n";
	}
	CondorTest::debug("$testname: SUCCESS\n",1);
	exit(0);
} else {
	die "$testname: CondorTest::RunTest() failed\n";
}
