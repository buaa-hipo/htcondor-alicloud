#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use Check::SimpleJob;

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

$testname = "job_core_perhold_van";

my $variation = "perholdfalse";

my %info;
my $cluster;

my $firstappend_condor_config = '
    DAEMON_LIST = MASTER,SCHEDD,COLLECTOR,NEGOTIATOR,STARTD
	PERIODIC_EXPR_interval = 30
    NUM_CPUS = 2
    NEGOTIATOR_INTERVAL = 5
';

$configfile = CondorTest::CreateLocalConfig($firstappend_condor_config,"perholdvan");
print "local config file:$configfile\n";

CondorTest::StartCondorWithParams(
    condor_name => "perholdvan",
    fresh_local => "TRUE",
    condorlocalsrc => "$configfile",
);

$executed = sub
{
	%info = @_;
	$cluster = $info{"cluster"};

	print "in executed with variation:$variation\n";
	if($variation eq "perholdfalse") {
		CondorTest::debug("Good. for periodic_hold cluster $cluster must run first\n",1);
	} else {
		CondorTest::debug("Periodic Hold should see and execute, followed by a hold and then we remove the job\n",1);
	}
};

$success = sub
{
	my %info = @_;
	my $cluster = $info{"cluster"};

	CondorTest::debug("Good, job should complete trivially\n",1);
	# Implicitly generates a "PASSED"
};

my $killedchosen = 0;

$abnormal = sub {
	my %info = @_;

	print "Abnormal termination: Want to see only execute, hold and abort events for periodic hold test\n";
	RegisterResult(0, "test_name", "$testname");
};

$aborted = sub {
	my %info = @_;
	my $done;
	CondorTest::debug("Abort event expected from periodic remove after hold event seen\n",1);
	RegisterResult(1, "test_name", "$testname");
};

$held = sub {
	my %info = @_;
	my $cluster = $info{"cluster"};

	CondorTest::debug("Held event expected, removing job.....\n",1);
	my @adarray;
	my $status = 1;
	my $cmd = "condor_rm $cluster";
	$status = CondorTest::runCondorTool($cmd,\@adarray,2,{emit_output=>0});
	if(!$status)
	{
		CondorTest::debug("Test failure due to Condor Tool Failure<$cmd>\n",1);
		RegisterResult(0, "test_name", "$testname");
	}
};

my $falsepolicy = '
periodic_hold = (time() - QDate) < 0
';


SimpleJob::RunCheck(
    append_submit_commands=>"$falsepolicy",
    duration=>4,
    on_execute=>$executed,
    on_success=>$success,
);

my $truepolicy = '
periodic_hold = JobStatus == 2
';

$variation = "perholdtrue";

SimpleJob::RunCheck(
    duration=>40,
    append_submit_commands=>$truepolicy,
    on_exitedabnormal=>$abnormal,
    on_execute=>$executed,
    on_hold=>$held,
    on_abort=>$aborted
);

CondorTest::EndTest();
print scalar localtime() . "\n";
my $result = 0;

if( $result != 0 )
{
    exit(1);
}

CondorTest::debug("$testname SUCCESS\n",1);
exit(0);
