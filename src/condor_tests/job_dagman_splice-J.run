#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

use CondorTest;
use CondorUtils;

#print "Do not run this test. The Condor modules can't handle it yet " .
	#"because RunDagTest can't take more than one submit file.\n";
#exit 0;

@dagfiles = ("job_dagman_splice-J-zero.dag" , "job_dagman_splice-J-one.dag");
$testdesc =  'Condor submit dag - basic splice test - scheduler U';
$testname = "job_dagman_splice-J";
$dagman_args = "-verbose";

@outfiles = (
				"0.A",
				"0.B",
				"0.S1+0.A",
				"0.S1+0.B",
				"0.S1+0.C",
				"0.S1+0.D",
				"0.S1+0.S2+0.A",
				"0.S1+0.S2+0.B",
				"0.S1+0.S2+0.C",
				"0.S1+0.S2+0.D",
				"1.A",
				"1.B",
				"1.C",
				"1.S1+1.A",
				"1.S1+1.B",
				"1.S1+1.C",
				"1.S1+1.D",
				"1.S1+1.S2+1.A",
				"1.S1+1.S2+1.B",
				"1.S1+1.S2+1.C",
				"1.S1+1.S2+1.D",
				"1.S2+1.A",
				"1.S2+1.B",
				"1.S2+1.C",
				"1.S2+1.D",
				"1.S2+1.S2+1.A",
				"1.S2+1.S2+1.B",
				"1.S2+1.S2+1.C",
				"1.S2+1.S2+1.D"
			);

my $killedchosen = 0;

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

$abnormal = sub 
{

	die "Want to see only submit, execute and successful completion\n";
};

$aborted = sub 
{
	die "Abort event NOT expected\n";
};

$held = sub 
{
	die "Held event NOT expected\n";
};

$executed = sub
{
	my %info = @_;

	CondorTest::debug("Good. We need the dag to run<$info{cluster}>\n",1);
};

$submitted = sub
{
	CondorTest::debug("submitted: This test will see submit, executing and successful completion\n",1);
};

$success = sub
{
	CondorTest::debug("executed successfully\n",1);
	CondorTest::debug("Verifying output\n",1);
	$diditpass = 1;
	foreach $name (@outfiles) {
		$line = "";
		$passed = 0;
		$canopen = open(OUT,"<$name.out");
		if( ! (defined $canopen)) {
			CondorTest::debug("Can not open outfile<$name.out>:$!\n",1);
			$diditpass = 0;
		}
		while(<OUT>) {
			chomp();
			$line = $_;
			if( $line =~ /^OK.*$/ ) {
				$passed = 1;
				CondorTest::debug("$name.out: $line\n",1);
			}
		}
		close(OUT);
		if($passed == 1 ) {
			;
		} else {
			CondorTest::debug("failed $name.out: $line\n",1);
			$diditpass = 0;
		}
	}
	# clean out old output files
	foreach $name (@outfiles) {
		runcmd("rm -f $name.out $name.err");
	}
	if($diditpass == 0) {
		die "All expected files and correct output failed\n";
	}
};

CondorTest::RegisterExitedSuccess( $testname, $success);
CondorTest::RegisterExecute($testname, $executed);
CondorTest::RegisterExitedAbnormal( $testname, $abnormal );
CondorTest::RegisterAbort( $testname, $aborted );
CondorTest::RegisterHold( $testname, $held );
CondorTest::RegisterSubmit( $testname, $submitted );

if( CondorTest::RunDagTest($testname, \@dagfiles, 0, $dagman_args) ) {
	CondorTest::debug("$testname: SUCCESS\n",1);
	exit(0);
} else {
	die "$testname: CondorTest::RunTest() failed\n";
}

