#! /usr/bin/env perl
#testreq: personal
##**************************************************************
##
## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
## 
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
## 
##    http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

## This tests the DAGMan VARS feature (and also the passing of a
## node's parents to condor_submit).

use CondorTest;
use CondorUtils;

$cmd = 'job_dagman_vars.dag';
$testdesc =  'Condor submit dag - VARS test - scheduler U';
$testname = "job_dagman_vars";
$dagman_args = "-verbose";

@logfiles = ("job_dagman_vars.dag.dagman.out");
@outfiles = ("job_dagman_vars-XNodeA.out", "job_dagman_vars-NodeBY.out", 
	"job_dagman_vars-ZNodeCZ.out", 
	"job_dagman_vars-NodeD.out",
	"job_dagman_vars-NodeE.out",
	"job_dagman_vars-NodeF.out",
	"job_dagman_vars-NodeG.out");
@outlines = ("<XNodeA> <Alberto Contador> <Andy	Schleck> <Lance_Armstrong> <!@#\$%^&*()_-=+=[]{}?> ",
	"<NodeBY> <NodeA> <Greg\"_LeMond> <\\Laurent_Fignon> <Pedro_Delgado> <> ",
	"<ZNodeCZ> <NodeA> <Andreas_Kloden> <Carlos_Sastre> ",
	"<NodeD> <NodeB,NodeC> <Lance_Armstrong> <Andreas\"_Kloden> <\\Ivan_Basso> <!@#\$%^&*()_-=+=[]{}?> ",
	"<NodeE> <NodeD> <bob> <X0> ",
	"<NodeF> <3> <3> ",
	"<Vincenzo 'The Shark' Nibali> <Bernard \"The Badger\" Hinault> ");

# truly const variables in perl
sub IDLE{1};
sub HELD{5};
sub RUNNING{2};

# Get rid of any existing log files.
foreach $name (@logfiles) {
	if (-e $name) {
		runcmd("rm -f $name");
	}
}

# Get rid of any existing output files.
foreach $name (@outfiles) {
	if (-e $name) {
		runcmd("rm -f $name");
	}
}

$abnormal = sub 
{
	die "Want to see only submit, execute and successful completion\n";
};

$aborted = sub 
{
	die "Abort event NOT expected\n";
};

$held = sub 
{
	die "Held event NOT expected\n";
};

$executed = sub
{
	my %info = @_;

	CondorTest::debug("Good. We need the dag to run<$info{cluster}>\n",1);
};

$submitted = sub
{
	CondorTest::debug("submitted: This test will see submit, executing, and successful completion\n",1);
};

$success = sub
{
	CondorTest::debug("executed successfully\n",1);
	CondorTest::debug("Verifying output\n",1);
	$diditpass = 1;

	# Check the dagman.out file for successful completion.
	foreach $name (@logfiles) {
		$line = "";
		$passed = 0;
		$canopen = open(OUT,"<$name");
		if( ! (defined $canopen)) {
			CondorTest::debug("Can not open logfile<$name>:$!\n",1);
			$diditpass = 0;
		}
		while(<OUT>) {
			chomp();
			$line = $_;

			if( $line =~ /EXITING WITH STATUS 0/ ) {
				CondorTest::debug("$name: $line\n",1);
				$passed = 1;
			}
		}
		close(OUT);
		if($passed == 1 ) {
			;
		} else {
			CondorTest::debug("FAILED $name: $line\n",1);
			$diditpass = 0;
		}
	}

	# Check the node job output files for proper output.
	for ($filenum = 0; $filenum <= $#outfiles; $filenum++) {
		$name = $outfiles[$filenum];
		$line = "";
		$passed = 0;
		$canopen = open(OUT,"<$name");
		if( ! (defined $canopen)) {
			CondorTest::debug("Can not open logfile<$name>:$!\n",1);
			$diditpass = 0;
		}
		while(<OUT>) {
			chomp();
			$line = $_;

			# Using eq here to avoid having to escape regexp special chars.
			if( $line eq $outlines[$filenum] ) {
				CondorTest::debug("$name: $line\n",1);
				$passed = 1;
			}
		}
		close(OUT);
		if($passed == 1 ) {
			;
		} else {
			CondorTest::debug("FAILED $name: $line\n",1);
			$diditpass = 0;
		}
	}

	if($diditpass == 0) {
		die "All expected files and correct output FAILED\n";
	}
};

CondorTest::RegisterExitedSuccess( $testname, $success);
CondorTest::RegisterExecute($testname, $executed);
CondorTest::RegisterExitedAbnormal( $testname, $abnormal );
CondorTest::RegisterAbort( $testname, $aborted );
CondorTest::RegisterHold( $testname, $held );
CondorTest::RegisterSubmit( $testname, $submitted );

if( CondorTest::RunDagTest($testname, $cmd, 0, $dagman_args) ) {
	CondorTest::debug("$testname: SUCCESS\n",1);
	exit(0);
} else {
	die "$testname: CondorTest::RunDagTest() FAILED\n";
}

