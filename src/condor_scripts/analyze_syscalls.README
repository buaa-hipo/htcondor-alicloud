
analyze_syscalls is a shell script which analyzes and compares
the system's libc.a to our condor_syscall_lib.a.

The purpose is to alert a Condor developer to possible problems.

Upon running the script, it spits out 11 reports to stdout.

Below is a brief description of each section:

Section 1
*** SYSTEM CALLS TRAPPED BY CONDOR
This is a list of all system calls (i.e. defined in the machine's
syscall.h list) which are trapped by Condor.  By "trapped", we
mean there exists a stub in condor_syscall_lib.a for that system call.

Section 2
*** SYSTEM CALLS TRAPPED AND _SUPPORTED_ BY CONDOR
This lists all the trapped system calls which are not listed
as either "ignored" or "unsupported" in the Condor syscall.tmpl
file used by the stub generator.  In addition, any system call
stubs found in condor_syscall_lib.a which were not generated by
stub-gen are also included in this list (i.e. calls in file_state.C,
switches.special.C) since 99% of the time they are supported.  
Note that some of these calls, although trapped by Condor, are really
only "partially" supported... socket() comes to mind...

Section 3
*** SYSTEM CALLS TRAPPED AND _UNSUPPORTED_ BY CONDOR
This lists all the trapped system calls which are listed as
"unsupported" in the Condor syscall.tmpl file.

Section 4
*** SYSTEM CALLS TRAPPED AND _IGNORED_ BY CONDOR
This lists all the trapped system calls which are listed as
"ignored" in the Condor syscall.tmpl file.

Section 5
*** SYSTEM CALLS NOT TRAPPED AT ALL BY CONDOR
This lists system calls present on this system which are not
trapped at all by Condor.  For each such system call, analyze_syscalls
attempts to extract a one-line description of the call from section
two of the online UNIX man pages.  This helps the developer decide
if Condor should or should not really be trapping this call.

Section 6
*** ALL UNDERSCORE SYSTEM CALLS FOUND IN LIBC
Lists all system call stubs found in libc.a which begin with one, two,
or three underscores.  Note that here we may list stubs for system
calls which Condor does not even attempt to trap.

Section 7
*** UNDERSCORE SYSTEM CALLS TRAPPED IN CONDOR
Lists all system call stubs which have underscores that are currently
being trapped by Condor.

Section 8
*** -->MISSED UNDERSCORE CALLS FOR TRAPPED CALLS IN CONDOR<--
IMPORTANT ONE!  This lists system calls which Condor is already (attempting)
to trap which have underscore versions that are _not_ being trapped.
Having any items in this list which are not purposfully understood
to be here is likely to cause problems for some Condor jobs, especially
Fortran jobs.

Section 9
*** SUGGESTED MACRO CALLS TO INSERT INTO switches.prolog
In switches.prolog, there are a bunch of REMAP_* macros defined.
In this section code is produced to call these macros to remedy the
missed underscore functions listed in Section 8.  The idea here is
to simply cut & paste what is listed here and place it into
"switches.remap-hpux.h" and then append in switches.prolog somthing
on the order of 
#ifdef HPUX
#include switches.remap-hpux.h"
#endif
analyze_syscalls attempts to do all the work for you by extracting
function argument prototypes from syscall.tmpl.  For some functions,
however, analyze_syscalls may not be able to find a prototype in 
which case it calls REMAP_UNKNOWN(...); you'll need to addin the
correct prototype for these functions.
Note: Some underscore function calls may not have been forgotten, but
left out for some reason! Careful!

Section 10
*** LIKELY FUNCTION/OBJECT NAMESPACE CLUTTER IN condor_syscall_lib
This lists functions which looks like namespace clutter in
condor_syscall_lib.a to analyze_syscalls.  condor_syscall_lib.a is 
linked with the user's code; the only global names should be
names of system call stubs and/or names that begin with "_condor".
Anything else is name-space clutter that could conflict with the user's
own names and therefore cause linker errors.  analyze_syscalls attempts
to identify C++ objects and just list the object name once followed
by "[C++]" instead of listing many multiple methods, etc.

Section 11
*** LIKELY VARIABLE NAMESPACE CLUTTER IN condor_syscall_lib
The same as Section 10, but this section lists global variables clutter
instead of global functions/objects clutter.

Thats all... enjoy!  -Todd Tannenbaum
