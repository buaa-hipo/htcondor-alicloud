/***************************************************************
 *
 * Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
 * University of Wisconsin-Madison, WI.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License.  You may
 * obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ***************************************************************/

/* Converted case statements to function calls instead. -psilord */

#ifdef LINK_PVM   
	// only include CONDOR_work_request when compiling up the PVM
	// starter.  It is used to send startup job info between the PVM
	// starter and shadow.  we do not want it in the regular condor_syscall_lib
	// because it sends Class Ads, and we do not want to force users to
	// link their STANDARD universe jobs with the classad library. -Todd 12/97
int
REMOTE_CONDOR_work_request(ClassAd *ad, char *&a_out, char *&targ, char *&orig,
	condor_signal_t *kill_sig)
{
	int scm;
	int rval;
	condor_errno_t terrno;
	sigset_t    omask;

	assert( a_out == NULL );
	assert( targ == NULL );
	assert( orig == NULL );

	scm = SetSyscalls( SYS_LOCAL | SYS_UNMAPPED );
	omask = _condor_signals_disable();

	CurrentSysCall = CONDOR_work_request;

	syscall_sock->encode();
	assert( syscall_sock->code(CurrentSysCall) );
	assert( syscall_sock->end_of_message() );

	syscall_sock->decode();
	assert( syscall_sock->code(rval) );
	if( rval < 0 ) {
		assert( syscall_sock->code(terrno) );
		assert( syscall_sock->end_of_message() );
		_condor_signals_enable( omask );
		SetSyscalls( scm );
		errno = (int)terrno;
		return rval;
	}
	assert( syscall_sock->code(kill_sig) );
	assert( syscall_sock->code(orig) );
	assert( syscall_sock->code(targ) );
	assert( syscall_sock->code(a_out) );
	assert( getClassAd(syscall_sock, *ad) );
	assert( syscall_sock->end_of_message() );

	_condor_signals_enable( omask );
	SetSyscalls( scm );
	return rval;
}
#endif

int
REMOTE_CONDOR_send_a_file(char *local, char *remote, mode_t mode)
{
	int		loc_fd;
	int		read_status = 0, write_status;
	char	buf[ STD_UNIV_IO_BUF_SIZE ];
	int		len;
	size_t	bytes_to_go;
	int		file_size;
	int scm;
	int rval;
	condor_errno_t terrno;
	sigset_t    omask;


	scm = SetSyscalls( SYS_LOCAL | SYS_UNMAPPED );
	omask = _condor_signals_disable();

	CurrentSysCall = CONDOR_send_a_file;

		/* Do the local open */
	if( (loc_fd = safe_open_wrapper(local,O_RDONLY)) < 0 ) {
		rval = -1;
		_condor_signals_enable( omask );
		SetSyscalls( scm );
		return rval;
	}

		/* Send over the file name, and mode */
	syscall_sock->encode();
	assert( syscall_sock->code(CurrentSysCall) );
	assert( syscall_sock->code(mode) );
	assert( syscall_sock->code(remote) );
	assert( syscall_sock->end_of_message() );

		/* Grab the result of the remote open */
	syscall_sock->decode();
	assert( syscall_sock->code(rval) );
	if( rval < 0 ) {
		assert( syscall_sock->code(terrno) );
		assert( syscall_sock->end_of_message() );
		rval = -1;
		_condor_signals_enable( omask );
		SetSyscalls( scm );
		errno = (int)terrno;
		return rval;
	}
	assert( syscall_sock->end_of_message() );

		/* Send file length */
	file_size = lseek( loc_fd, 0, 2 );
	lseek( loc_fd, 0, 0 );
	syscall_sock->encode();
	assert( syscall_sock->code(file_size) );

		/* Transfer the data */
	for( bytes_to_go = file_size; bytes_to_go; bytes_to_go -= len ) {
		len = bytes_to_go < sizeof(buf) ? bytes_to_go : sizeof(buf);
		read_status = read( loc_fd, buf, len );
		assert( syscall_sock->code_bytes_bool(buf,len) );
	}
	(void)close( loc_fd );

		/* As a check, re-send the length */
	assert( syscall_sock->code(file_size) );
	assert( syscall_sock->end_of_message() );


		/* Get cumulative status from remote writes */
	syscall_sock->decode();
	assert( syscall_sock->code(write_status) );
	if( write_status < 0 ) {
		assert( syscall_sock->code(terrno) );
		assert( syscall_sock->end_of_message() );
		rval = write_status;
		_condor_signals_enable( omask );
		SetSyscalls( scm );
		errno = (int)terrno;
		return rval;
	}
	assert( syscall_sock->end_of_message() );

		/* If we had a local error on the reads, we had to ignore
		   it until now to avoid getting out of sync with the
		   shadow - now we can deal with it.
		*/
	if( read_status < 0 ) {
		rval = read_status;
		_condor_signals_enable( omask );
		SetSyscalls( scm );
		return rval;
	}

		/* Everything worked - status is cumulative status from
		   remote writes.
		*/
	rval = write_status;
	_condor_signals_enable( omask );
	SetSyscalls( scm );
	return rval;
}

int
REMOTE_CONDOR_get_file(char *remote, char *local, int mode)
{
	int		loc_fd;
	int		write_status = 0, read_status;
	char	buf[ STD_UNIV_IO_BUF_SIZE ];
	unsigned		checksum;
	size_t		len;
	size_t		file_size;
	size_t		bytes_to_go;
	int		scm;
	int		close_status;
	int		rval;
	sigset_t	omask;
	condor_errno_t	terrno;

	scm = SetSyscalls( SYS_LOCAL | SYS_UNMAPPED );
	omask = _condor_signals_disable();

	CurrentSysCall = CONDOR_get_file;

		/* Open local file for writing */
	loc_fd = safe_open_wrapper( local, O_WRONLY|O_CREAT|O_TRUNC, mode );
	if( loc_fd < 0 ) {
		rval = -1;
		_condor_signals_enable( omask );
		SetSyscalls( scm );
		return rval;
	}

		/* Send over the file name */
	syscall_sock->encode();
	assert( syscall_sock->code(CurrentSysCall) );
	assert( syscall_sock->code(remote) );
	assert( syscall_sock->end_of_message() );

		/* Grab the result of the remote open */
	syscall_sock->decode();
	assert( syscall_sock->code(rval) );
	if( rval < 0 ) {
		assert( syscall_sock->code(terrno) );
		assert( syscall_sock->end_of_message() );
		rval = -1;
		_condor_signals_enable( omask );
		SetSyscalls( scm );
		errno = (int)terrno;
		return rval;
	}

		/* Get the size of the file */
	assert( syscall_sock->code(file_size) );

		/* Transfer the data */
	for( bytes_to_go = file_size; bytes_to_go; bytes_to_go -= len ) {
		len = bytes_to_go < sizeof(buf) ? bytes_to_go : sizeof(buf);
		assert( syscall_sock->code_bytes_bool(buf,len) );
		write_status = write( loc_fd, buf, len );
	}
	close_status = close( loc_fd );
	if( close_status < 0 ) {
		dprintf( D_ALWAYS,
			"Close of \"%s\" failed - errno = %d\n", local, errno
		);
	}

		/* Should get file size again as a check */
	assert( syscall_sock->code(checksum) );
	assert( checksum == file_size );

		/* Get status from remote reads */
	assert( syscall_sock->code(read_status) );
	if( read_status < 0 ) {
		assert( syscall_sock->code(terrno) );
		assert( syscall_sock->end_of_message() );
		rval = -1;
		_condor_signals_enable( omask );
		SetSyscalls( scm );
		errno = (int)terrno;
		return rval;
	}
	assert( syscall_sock->end_of_message() );

	/* Wrapup */
	if( write_status >= 0 && read_status >= 0 && close_status >= 0 ) {
		dprintf( D_ALWAYS,
			"CONDOR_get_file: transferred %lu bytes\n", 
			(unsigned long)file_size );
		rval = 0;
	} else {
		rval = -1;
	}

	_condor_signals_enable( omask );
	SetSyscalls( scm );
	return rval;
}

// Stolen from the code generator.
#if defined(LINUX)

#if defined( SYS_mmap )
void * REMOTE_CONDOR_mmap(void * a, size_t l, int p, int f, int fd, off_t o) {
    int scm;
    void *    ret_val;
    condor_errno_t   terrno;
    sigset_t    omask;

    scm = SetSyscalls( SYS_LOCAL | SYS_UNMAPPED );
    omask = _condor_signals_disable();
    CurrentSysCall = CONDOR_mmap;

    syscall_sock->encode();
    assert( syscall_sock->code(CurrentSysCall) );
    assert( syscall_sock->code(l) );
    assert( syscall_sock->code(p) );
    assert( syscall_sock->code(f) );
    assert( syscall_sock->code(fd) );
    assert( syscall_sock->code(o) );
    assert( syscall_sock->end_of_message() );

    syscall_sock->decode();
    assert( syscall_sock->code(ret_val) );
    if(  ret_val == MAP_FAILED  ) {
        assert( syscall_sock->code(terrno) );
        assert( syscall_sock->end_of_message() );
        _condor_signals_enable( omask );
        SetSyscalls( scm );
        errno = (int)terrno;
        return ret_val;
    }
    assert( syscall_sock->end_of_message() );
    _condor_signals_enable( omask );
    SetSyscalls( scm );
    return ret_val;
}
#endif // defined( SYS_mmap )

#endif // defined( LINUX )

} /* end of extern "C" from prologue */
