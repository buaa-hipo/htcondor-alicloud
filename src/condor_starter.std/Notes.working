


			IMPLEMENTATION NOTES FOR CONDOR STARTER




I. Virtual Image Size
	calculate this and update the shadow after each user proc termination

II. Space for checkpoints
	calculate this before attempting to update a checkpoint

III. Abnormal coredumps
	check both user specified limit and avail disk on submitting machine
	before attempting to transfer one of these.

IV. Resource usage
	Update shadow only upon termination using really_exit()
	Initially zero, and accumulate at user proc termination as follows:
		Normal exit: accumulate
		Killed: don't accumulate
		Successful Checkpoint: accumulate
		Unsuccessful Checkpoint: don't accumulate
		Abnormal Exit: accumulate

V. Status encoding as follows:
	Condition					w_termsig		w_coredump	w_retcode

	Bad magic number: 			0 				1 			ENOEXEC
	Not linked properly: 		0 				1 			0
	Normal exit: 				0 				0 			varies
	Ckpt created and xfered:	SIGQUIT
	Kicked off w/o checkpoint:	SIGKILL						1 if core xfered
	Abnormal exit:				varies (not					0 otherwise
								QUIT,KILL or 0)
