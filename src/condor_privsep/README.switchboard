In general any errors detected or violation of checks will cause the program to
exit.

The operation of this program is done by hard coded values in the code, a
configuration file, the first (and only) argument, and finally if the operation
to be performed required addition data the values for these are received be
reading CMD_CONF_FD.

The same configuration file format is used in both the main configuration, and
the command configuration.  The format for the configuration is a series of the
following forms:

1) All whitespace.  This is ignored.
2) First non-whitespace is a '#'.  This is a comment and is also ignored
3) Consisting of just a key (a sequence of characters except '=', whitespace,
   and '<').  Leading and trailing whitespace is always removed.  This is a
   boolean option.
4) Consisting of key '=' value.  Where key is defined as above, and the value
   is taken as the everything after the '=' to the end of the line with leading
   and trailing whitespace removed.
5) Consisting of a key '<' num_bytes '>'.  This is a format which allows values
   not expressible in format 4:  values has leading or trailing whitespace, or
   an embedded new-line.  The number of characters in num_bytes is read to
   make up the value.

In the description below if an item is a 'list', specifying the option multiple
times will add the item to a list.  There is no way to reset an option of
previously set values.

id, uid, and gid list values have a special format to allow specifying multiple
and ranges of values on the same entry.  It consists of a string M, or N '-' N,
or N '-' '*'.  Uid and gid list can use numeric or textual names for the ids.
'*' on the right-hand side of a range denotes the largest value possible.
Non-numeric value extend until whitespace or a ':', so if a textual ids are used
in a range the '-' must be proceeded by whitespace.  Multiple entries can be
specified in the same value be using a ':' seperated list or ids or ranges.

As an example 
    # required
    valid-caller-uids = condor
    valid-caller-gids = condor

	# comment
    #required
    valid-target-uids = bob : 1000 - *
    valid-target-gids = 100-110 : 200 - *:bob

    #optional
    # use 3 user dirs /var/sandbox, /var/sandbox2 and /2345
    valid-dirs = /var/sandbox
    valid-dirs = /var/sandbox2
    valid-dirs <5>
    /2345

    #required
    procd-executable = /opt/condor/bin/procd
    #optional
    transferd-executable = /opt/condor/bin/transferd




hard coded #define's in the executable:
---------------------------------------

CONF_FILE
    Path to the configuration file.  This file must be stored securely, based
    on the values of CONF_SAFE_UIDS and CONF_SAFE_GIDS

CONF_SAFE_UIDS
    User ids (not including root) that should be trusted.  If this account can be
    compromised, so can the whole system.  This has the format of uid list in the
    configuration file.

CONF_SAFE_GIDS
    Group ids (not including root) that should be trusted.  If this account can be
    compromised, so can the whole system.  This has the format of uid list in the
    configuration file.

ERR_FD
    The file descriptor to which all error will be written.  Defaults to stderr.

CMD_CONF_FD
    file descriptor to which additional command parameters will be read.  Defaults
    to stdin.



main configuration file:
------------------------

valid-caller-uids=uid_list_values	string
    (required)
    the real user id of the caller must be in the list.

valid-caller-gids=gid_list_values	string
    (required)
    the real group id of the caller must be in the list.

valid-target-uids=uid_list_values	string
    (required)
    the user id for the transferd, directory and job execution commands
    must be in the list.

valid-target-gids=gid_list_values	string
    (required)
    the group id for the transferd, directory and job execution commands
    must be in the list.

valid-dirs=path			string list
    (optional, but needed for directory commands)
    The parent directory of the user directory to perform directory
    commands must be in this list.  Their path must be secure 
     (i.e owned by CONF_SAFE_UIDS, which defaults to root only).

transferd-executable=path	string
    (optional)
    The path to transferd executable.

procd-executable=path		string
    (required)
    The path to the procd executable.  This path must be secure.

valid-user-exectuables		string list
    not implemented.

valid-user-exectuable-dirs	string list
    not implemented.


Command line arguments (exactly 3 required):
-------------------------------------------
command controlFD errorFD


Valid commands:
--------------
pd
td
mkdir
rmdir
chowndir
exec


controlFD:
---------
The command options are read from the controlFD and are described below.
If controlFD==0, then the options are read from the stdin.

errorFD:
-------
Any error will be written here.
Use errorFD==2 to redirect to stderr.


procd executable command:  pd
-----------------------------
NO OPTIONS



transferd executable command:  td
---------------------------------
user-uid=uid			string
    uid to start the transferd executable as.



create directory command:  mkdir
--------------------------------
user-uid=uid			string
    uid of the created dir

user-dir=path			string
    directory to be created.  Must be directory contained in a valid-user-dirs

remove directory tree command:  rmdir
-------------------------------------
user-dir=path			string
    directory to be removed.  Must be directory contained in a valid-user-dirs

change ownership of a directory tree command:  chowndir
-------------------------------------------------------
chown-source-uid=uid		string
    current uid of the directory tree to chown

user-uid=uid			string
    uid to which to chown the directory tree

user-dir=path			string
    directory to act upon.  Must be directory contained in a valid-user-dirs



execute user job command:  exec
-------------------------------
user-uid=uid			string
    uid to start job as.

exec-arg<length>\narg		explicit length string list
    arguments to job (must include executable name as first value if you
    want to follow normal conventions.

exec-env<length>\nkey=value	explicit length string list
    environment (key=value) strings.

exec-path=path			string
    path to the executable to start.

exec-init-dir=path		string
    initial working directory for the process.

exec-stdin=path			string
    filename to open for stdin for the process.  If not set /dev/null is used.

exec-stdout=path		string
    filename to open for stdout for the process.  If not set /dev/null is used.

exec-stderr=path		string
    filename to open for stderr for the process.  If not set /dev/null is used.

exec-is-std-univ=bool		boolean
    not implemented.  will configure the process to do special things for
    standard universe jobs.

exec-keep-open-fd=nr		id list
    file descriptor t be kept open.  All other file descriptors
    will be closed.  This value overrides exec-std{in,out,err} options.
    Note that the file descriptor used by the switchboard for error output
    (i.e. the second file descriptor specified on the command line) is
    always closed when the job starts, even if it is added to this list.
    This behavior may change in future versions.  If you want error output
    from the switchboard to be combined with stderr output from the job,
    dup the stderr file descriptor to a new descriptor and specify this new
    descriptor as the error descriptor for the switchboard.


Example that combines error output of switchboard and executed command
----------------------------------------------------------------------

/usr/sbin/condor_root_switchboard exec 0 3 3>&2 <<EOF
user-uid=slot1
exec-init-dir=/var/lib/condor/execute/slot1
exec-path=/tmp/testscript
exec-keep-open-fd=1 : 2
EOF

Simple example of rmdir
-----------------------
echo "user-dir=/var/sandbox/work123" | /usr/sbin/condor_root_switchboard rmdir 0 2
