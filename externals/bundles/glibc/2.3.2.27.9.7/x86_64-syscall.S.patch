--- /home/psilord/glibc-2.3.2.27.9.7/sysdeps/unix/sysv/linux/x86_64/syscall.S	2001-09-19 05:31:54.000000000 -0500
+++ /sysdeps/unix/sysv/linux/x86_64/syscall.S	2006-03-29 17:12:07.000000000 -0600
@@ -1,4 +1,4 @@
-/* Copyright (C) 2001 Free Software Foundation, Inc.
+/* Copyright (C) 2001, 2003 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
 
    The GNU C Library is free software; you can redistribute it and/or
@@ -21,20 +21,20 @@
 /* Please consult the file sysdeps/unix/sysv/linux/x86-64/sysdep.h for
    more information about the value -4095 used below.  */
 
-/* Usage: long syscall (syscall_number, arg1, arg2, arg3, arg4, arg5)
+/* Usage: long syscall (syscall_number, arg1, arg2, arg3, arg4, arg5, arg6)
    We need to do some arg shifting, the syscall_number will be in
    rax.  */
 
 
 	.text
 ENTRY (syscall)
-
 	movq %rdi, %rax		/* Syscall number -> rax.  */
 	movq %rsi, %rdi		/* shift arg1 - arg5.  */
 	movq %rdx, %rsi
 	movq %rcx, %rdx
 	movq %r8, %r10
 	movq %r9, %r8
+	movq 8(%rsp),%r9	/* arg6 is on the stack.  */
 	syscall			/* Do the system call.  */
 	cmpq $-4095, %rax	/* Check %rax for error.  */
 	jae SYSCALL_ERROR_LABEL	/* Jump to error handler if error.  */
